// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobsService_Start_FullMethodName  = "/JobsService/Start"
	JobsService_Stop_FullMethodName   = "/JobsService/Stop"
	JobsService_Status_FullMethodName = "/JobsService/Status"
	JobsService_Tail_FullMethodName   = "/JobsService/Tail"
)

// JobsServiceClient is the client API for JobsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main Server gRPC API
type JobsServiceClient interface {
	Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobStartResponse, error)
	Stop(ctx context.Context, in *JobIdRequest, opts ...grpc.CallOption) (*JobStopResponse, error)
	Status(ctx context.Context, in *JobIdRequest, opts ...grpc.CallOption) (*JobStatusResponse, error)
	Tail(ctx context.Context, in *JobIdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JobOutputResponse], error)
}

type jobsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobsServiceClient(cc grpc.ClientConnInterface) JobsServiceClient {
	return &jobsServiceClient{cc}
}

func (c *jobsServiceClient) Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStartResponse)
	err := c.cc.Invoke(ctx, JobsService_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Stop(ctx context.Context, in *JobIdRequest, opts ...grpc.CallOption) (*JobStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStopResponse)
	err := c.cc.Invoke(ctx, JobsService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Status(ctx context.Context, in *JobIdRequest, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, JobsService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Tail(ctx context.Context, in *JobIdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JobOutputResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JobsService_ServiceDesc.Streams[0], JobsService_Tail_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JobIdRequest, JobOutputResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobsService_TailClient = grpc.ServerStreamingClient[JobOutputResponse]

// JobsServiceServer is the server API for JobsService service.
// All implementations should embed UnimplementedJobsServiceServer
// for forward compatibility.
//
// Main Server gRPC API
type JobsServiceServer interface {
	Start(context.Context, *JobStartRequest) (*JobStartResponse, error)
	Stop(context.Context, *JobIdRequest) (*JobStopResponse, error)
	Status(context.Context, *JobIdRequest) (*JobStatusResponse, error)
	Tail(*JobIdRequest, grpc.ServerStreamingServer[JobOutputResponse]) error
}

// UnimplementedJobsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobsServiceServer struct{}

func (UnimplementedJobsServiceServer) Start(context.Context, *JobStartRequest) (*JobStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJobsServiceServer) Stop(context.Context, *JobIdRequest) (*JobStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedJobsServiceServer) Status(context.Context, *JobIdRequest) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedJobsServiceServer) Tail(*JobIdRequest, grpc.ServerStreamingServer[JobOutputResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Tail not implemented")
}
func (UnimplementedJobsServiceServer) testEmbeddedByValue() {}

// UnsafeJobsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobsServiceServer will
// result in compilation errors.
type UnsafeJobsServiceServer interface {
	mustEmbedUnimplementedJobsServiceServer()
}

func RegisterJobsServiceServer(s grpc.ServiceRegistrar, srv JobsServiceServer) {
	// If the following call pancis, it indicates UnimplementedJobsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobsService_ServiceDesc, srv)
}

func _JobsService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Start(ctx, req.(*JobStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Stop(ctx, req.(*JobIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Status(ctx, req.(*JobIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Tail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServiceServer).Tail(m, &grpc.GenericServerStream[JobIdRequest, JobOutputResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobsService_TailServer = grpc.ServerStreamingServer[JobOutputResponse]

// JobsService_ServiceDesc is the grpc.ServiceDesc for JobsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JobsService",
	HandlerType: (*JobsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _JobsService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _JobsService_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _JobsService_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tail",
			Handler:       _JobsService_Tail_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
